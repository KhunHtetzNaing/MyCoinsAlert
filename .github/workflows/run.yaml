name: Deploy Bot On Server

on:
  release:
    types:
      - published
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production  # Added for better secrets management

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: '${{ secrets.SSH_PRIVATE_KEY }}'

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Create env file
        run: |
          echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > .env

      - name: Create backup directory
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            timestamp=$(date +%Y%m%d_%H%M%S)
            if [ -d ~/bot ]; then
              rsync -av --progress --exclude="__pycache__/" \
                       --exclude="env/" \
                       ~/bot/ ~/bot_backup_$timestamp && echo "Backup done" || echo "Backup failed"
            else
              echo "No need to backup!"
            fi
          '

      - name: Transfer files to server
        run: |
          rsync -avz --exclude '.git*' \
                     --exclude '.idea/' \
                     ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/bot/

      - name: Deploy and verify
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd ~/bot || exit 1
          
            # Ensure deploy.sh exists and is executable
            if [ ! -f "deploy.sh" ]; then
              echo "Error: deploy.sh not found!"
              exit 1
            fi
          
            # Set permissions
            chmod +x deploy.sh
          
            # Run deploy script with error handling
            if sudo ./deploy.sh; then
              echo "Deployment completed successfully at $(date)"
            else
              echo "Deployment failed"
              # Optional: Restore from backup
              # latest_backup=$(ls -td ~/bot_backup_* | head -n1)
              # cp -r $latest_backup/* ~/bot/
              exit 1
            fi
          '